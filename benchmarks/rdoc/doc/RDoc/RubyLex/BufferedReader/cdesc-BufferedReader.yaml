--- !ruby/object:RDoc::RI::ClassDescription 
attributes: 
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  name: line_num
  rw: R
class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Read an input stream character by character. We allow for unlimited ungetting of characters just read.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: We simplify the implementation greatly by reading the entire input into a buffer initially, and then simply traversing it using pointers.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "We also have to allow for the <em>here document diversion</em>. This little gem comes about when the lexer encounters a here document. At this point we effectively need to split the input stream into two parts: one to read the body of the here document, the other to read the rest of the input line where the here document was initially encountered. For example, we might have"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  do_something(&lt;&lt;-A, &lt;&lt;-B)\n    stuff\n    for\n  A\n    stuff\n    for\n  B\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: When the lexer encounters the &lt;&lt;A, it reads until the end of the line, and keeps it around for later. It then reads the body of the here document. Once complete, it needs to read the rest of the original line, but then skip the here document body.
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Read an input stream character by character. We allow for unlimited ungetting of characters just read.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: We simplify the implementation greatly by reading the entire input into a buffer initially, and then simply traversing it using pointers.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "We also have to allow for the <em>here document diversion</em>. This little gem comes about when the lexer encounters a here document. At this point we effectively need to split the input stream into two parts: one to read the body of the here document, the other to read the rest of the input line where the here document was initially encountered. For example, we might have"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  do_something(&lt;&lt;-A, &lt;&lt;-B)\n    stuff\n    for\n  A\n    stuff\n    for\n  B\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: When the lexer encounters the &lt;&lt;A, it reads until the end of the line, and keeps it around for later. It then reads the body of the here document. Once complete, it needs to read the rest of the original line, but then skip the here document body.
constants: []

full_name: RDoc::RubyLex::BufferedReader
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: column
- !ruby/object:RDoc::RI::MethodSummary 
  name: divert_read_from
- !ruby/object:RDoc::RI::MethodSummary 
  name: get_read
- !ruby/object:RDoc::RI::MethodSummary 
  name: getc
- !ruby/object:RDoc::RI::MethodSummary 
  name: getc_already_read
- !ruby/object:RDoc::RI::MethodSummary 
  name: peek
- !ruby/object:RDoc::RI::MethodSummary 
  name: peek_equal
- !ruby/object:RDoc::RI::MethodSummary 
  name: ungetc
name: BufferedReader
superclass: Object
