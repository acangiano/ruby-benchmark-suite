--- !ruby/object:RDoc::RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "RDoc::Markup parses plain text documents and attempts to decompose them into their constituent parts. Some of these parts are high-level: paragraphs, chunks of verbatim text, list entries and the like. Other parts happen at the character level: a piece of bold text, a word in code font. This markup is similar in spirit to that used on WikiWiki webs, where folks create web pages using a simple set of formatting rules."
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "RDoc::Markup itself does no output formatting: this is left to a different set of classes."
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "RDoc::Markup is extendable at runtime: you can add \\new markup elements to be recognised in the documents that RDoc::Markup parses."
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: RDoc::Markup is intended to be the basis for a family of tools which share the common requirement that simple, plain-text should be rendered in a variety of different output formats and media. It is envisaged that RDoc::Markup could be the basis for formatting RDoc style comment blocks, Wiki entries, and online FAQs.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Synopsis
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: This code converts <tt>input_string</tt> to HTML. The conversion takes place in the <tt>convert</tt> method, so you can use the same RDoc::Markup converter to convert multiple input strings.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  require 'rdoc/markup/to_html'\n\n  h = RDoc::Markup::ToHtml.new\n\n  puts h.convert(input_string)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "You can extend the RDoc::Markup parser to recognise new markup sequences, and to add special processing for text that matches a regular expression. Here we make WikiWords significant to the parser, and also make the sequences {word} and &lt;no&gt;text...&lt;/no&gt; signify strike-through text. When then subclass the HTML output class to deal with these:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  require 'rdoc/markup'\n  require 'rdoc/markup/to_html'\n\n  class WikiHtml &lt; RDoc::Markup::ToHtml\n    def handle_special_WIKIWORD(special)\n      &quot;&lt;font color=red&gt;&quot; + special.text + &quot;&lt;/font&gt;&quot;\n    end\n  end\n\n  m = RDoc::Markup.new\n  m.add_word_pair(&quot;{&quot;, &quot;}&quot;, :STRIKE)\n  m.add_html(&quot;no&quot;, :STRIKE)\n\n  m.add_special(/\\b([A-Z][a-z]+[A-Z]\\w+)/, :WIKIWORD)\n\n  wh = WikiHtml.new\n  wh.add_tag(:STRIKE, &quot;&lt;strike&gt;&quot;, &quot;&lt;/strike&gt;&quot;)\n\n  puts &quot;&lt;body&gt;#{wh.convert ARGF.read}&lt;/body&gt;&quot;\n"
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: AttrChanger
  value: Struct.new :turn_on, :turn_off
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: SPACE
  value: ?\s
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: "List entries look like:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  *       text\n  1.      text\n  [label] text\n  label:: text\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Flag it as a list entry, and work out the indent for subsequent lines
  name: SIMPLE_LIST_RE
  value: /^(                 (  \*          (?# bullet)                   |-           (?# bullet)                   |\d+\.       (?# numbered )                   |[A-Za-z]\.  (?# alphabetically numbered )                 )                 \s+               )\S/x
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: LABEL_LIST_RE
  value: "/^(                       (  \\[.*?\\]    (?# labeled  )                         |\\S.*::     (?# note     )                       )(?:\\s+|$)                     )/x"
full_name: RDoc::Markup
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_html
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_special
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_word_pair
- !ruby/object:RDoc::RI::MethodSummary 
  name: content
- !ruby/object:RDoc::RI::MethodSummary 
  name: convert
- !ruby/object:RDoc::RI::MethodSummary 
  name: get_line_types
name: Markup
superclass: Object
