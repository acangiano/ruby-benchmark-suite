--- !ruby/object:RDoc::RI::ClassDescription 
attributes: 
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: RDoc::CodeObject for generating references
  name: context
  rw: RW
class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Subclass of the RDoc::Markup::ToHtml class that supports looking up words from a context. Those that are found will be hyperlinked.
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Subclass of the RDoc::Markup::ToHtml class that supports looking up words from a context. Those that are found will be hyperlinked.
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Regular expressions to match class and method references.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: 1) There can be a '\' in front of text to suppress any cross-references 2) There can be a '::' in front of class names to reference from the
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "   top-level namespace.\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: 3) The method can be followed by parenthesis which may
  name: CLASS_REGEXP_STR
  value: "'\\\\\\\\?((?:\\:{2})?[A-Z]\\w*(?:\\:\\:\\w+)*)'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Regular expressions matching text that should potentially have cross-reference links generated are passed to add_special. Note that these expressions are meant to pick up text for which cross-references have been suppressed, since the suppression characters are removed by the code that is triggered.
  name: CROSSREF_REGEXP
  value: "/(                       # A::B::C.meth                       #{CLASS_REGEXP_STR}[\\.\\#]#{METHOD_REGEXP_STR}                        # Stand-alone method (proceeded by a #)                       | \\\\?\\##{METHOD_REGEXP_STR}                        # A::B::C                       # The stuff after CLASS_REGEXP_STR is a                       # nasty hack.  CLASS_REGEXP_STR unfortunately matches                       # words like dog and cat (these are legal \"class\"                       # names in Fortran 95).  When a word is flagged as a                       # potential cross-reference, limitations in the markup                       # engine suppress other processing, such as typesetting.                       # This is particularly noticeable for contractions.                       # In order that words like \"can't\" not                       # be flagged as potential cross-references, only                       # flag potential class cross-references if the character                       # after the cross-referece is a space or sentence                       # punctuation.                       | #{CLASS_REGEXP_STR}(?=[\\s\\)\\.\\?\\!\\,\\;]|\\z)                        # Things that look like filenames                       # The key thing is that there must be at least                       # one special character (period, slash, or                       # underscore).                       | [\\/\\w]+[_\\/\\.][\\w\\/\\.]+                        # Things that have markup suppressed                       | \\\\[^\\s]                       )/x"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: METHOD_REGEXP_STR
  value: "'(\\w+[!?=]?)(?:\\([\\.\\w+\\*\\/\\+\\-\\=\\<\\>]*\\))?'"
full_name: RDoc::Markup::ToHtmlCrossref
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: handle_special_CROSSREF
name: ToHtmlCrossref
superclass: RDoc::Markup
